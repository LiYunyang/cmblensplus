!///////////////////////////////////////////////////////////!
! 2D Cross Normalization
!///////////////////////////////////////////////////////////!

module norm_kxt
  use constants, only: iu, i1, pi, dlc, twopi
  use grid2d, only: elarrays_2d, make_lmask
  use fftw,  only: dft
  implicit none

  private iu, i1, pi, dlc, twopi
  private elarrays_2d, make_lmask
  private dft

contains 


subroutine qtt(nx,ny,D,rL,OT,TT,eL,Akt)
!*  Normalization of the temperature quadratic estimators between CMB lensing potential and patchy tau
!*
!*  Args:
!*    :nx, ny (int)       : Number of Lx and Ly grids
!*    :D[xy] (double)     : Map side length, or equivalent to dLx/2pi, dLy/2pi, with bounds (2)
!*    :rL[2] (int)        : Minimum and maximum multipole of CMB for reconstruction
!*    :OT[lx,ly] (double) : Inverse of Observed temperature power spectrum on 2D grid, with bounds (nx,ny)
!*    :TT[lx,ly] (double) : Theory temperature power spectrum on 2D grid, with bounds (nx,ny)
!*    :eL[2] (int)        : Minimum and maximum multipole of output normalization spectrum, with bounds (2)
!*
!*  Returns:
!*    :Akt[lx,ly] (dcmplx) : Lensing-tau cross normalization on 2D grid, with bounds (nx,ny)
!*
  implicit none
  !I/O
  integer, intent(in) :: nx, ny
  integer, intent(in), dimension(2) :: eL, rL
  double precision, intent(in), dimension(2) :: D
  double precision, intent(in), dimension(nx,ny) :: OT, TT
  double precision, intent(out), dimension(nx,ny) :: Akt
  !internal
  integer :: i, j, nn(2)
  double precision, dimension(nx,ny) :: lmask, lx, ly, Alkt
  double complex, dimension(nx,ny) :: A, Ax, Ay, Bx, By

  nn = (/nx,ny/)

  call elarrays_2d(nn,D,elx=lx,ely=ly)

  ! filtering
  call make_lmask(nn,D,rL,lmask)

  Ax = lmask * lx * TT**2*OT
  Ay = lmask * ly * TT**2*OT
  A  = lmask * OT
  Bx = lmask * lx * TT * OT
  By = lmask * ly * TT * OT

  ! convolution
  call dft(Ax,nn,D,-1)
  call dft(Ay,nn,D,-1)
  call dft(A,nn,D,-1)
  call dft(Bx,nn,D,-1)
  call dft(By,nn,D,-1)
  Ax = A*Ax + Bx**2
  Ay = A*Ay + By**2

  call dft(Ax,nn,D,1)
  call dft(Ay,nn,D,1)

  ! normalization
  call make_lmask(nn,D,eL,lmask)
  Alkt = lmask * (lx*Ax + ly*Ay)

  ! inversion
  Akt = 0d0
  do i = 1, nx
    do j = 1, ny
      if (Alkt(i,j)>0)  Akt(i,j) = 1d0/Alkt(i,j)
    end do
  end do

end subroutine qtt


subroutine qte(nx,ny,D,rL,OT,OE,TE,eL,Akt)
!*  Normalization of the TE quadratic estimator between CMB lensing potential and patchy tau
!*
!*  Args:
!*    :nx, ny (int)       : Number of Lx and Ly grids
!*    :D[xy] (double)     : Map side length, or equivalent to dLx/2pi, dLy/2pi, with bounds (2)
!*    :rL[2] (int)        : Minimum and maximum multipole of CMB for reconstruction
!*    :OT[lx,ly] (double) : Inverse of Observed temperature power spectrum on 2D grid, with bounds (nx,ny)
!*    :OE[lx,ly] (double) : Inverse of Observed E-mode power spectrum on 2D grid, with bounds (nx,ny)
!*    :TE[lx,ly] (double) : Theory TE cross spectrum on 2D grid, with bounds (nx,ny)
!*    :eL[2] (int)        : Minimum and maximum multipole of output normalization spectrum, with bounds (2)
!*
!*  Returns:
!*    :Akt[lx,ly] (dcmplx) : Lensing-tau cross normalization on 2D grid, with bounds (nx,ny)
!*
  implicit none
  !I/O
  integer, intent(in) :: nx, ny
  integer, intent(in), dimension(2) :: eL, rL
  double precision, intent(in), dimension(2) :: D
  double precision, intent(in), dimension(nx,ny) :: TE, OT, OE
  double precision, intent(out), dimension(nx,ny) :: Akt
  !internal
  integer :: i, j, nn(2)
  double precision, dimension(nx,ny) :: lmask, lx, ly, Alkt
  double complex, dimension(nx,ny) :: ei2p, Ax1, Ay1, A2, Bx1, By1, B2, C1, C2, D1, D2, E1, E2

  nn = (/nx,ny/)

  call elarrays_2d(nn,D,lx,ly,ei2p=ei2p)

  ! filtering
  call make_lmask(nn,D,rL,lmask)

  Ax1 = lmask * OT * TE**2 * ei2p**2 * lx
  Ay1 = lmask * OT * TE**2 * ei2p**2 * ly
  A2  = lmask * OE * conjg(ei2p)**2 / 4d0
  Bx1 = lmask * OT * TE**2 * lx
  By1 = lmask * OT * TE**2 * ly
  B2  = - lmask * OE / 4d0
  C1  = lmask * OT * TE**2
  C2  = lmask * OE / 2d0
  D1  = lmask * OT * TE * ei2p
  D2  = lmask * OE * TE * conjg(ei2p) / 2d0
  E1  = lmask * OT * TE
  E2  = lmask * OE * TE / 2d0

  ! inverse FT
  call dft(Ax1,nn,D,-1)
  call dft(Ay1,nn,D,-1)
  call dft(A2,nn,D,-1)
  call dft(Bx1,nn,D,-1)
  call dft(By1,nn,D,-1)
  call dft(B2,nn,D,-1)
  call dft(C1,nn,D,-1)
  call dft(C2,nn,D,-1)
  call dft(D1,nn,D,-1)
  call dft(D2,nn,D,-1)
  call dft(E1,nn,D,-1)
  call dft(E2,nn,D,-1)

  ! convolution
  Ax1 = Ax1*A2 + Bx1*B2
  Ay1 = Ay1*A2 + By1*B2
  call dft(Ax1,nn,D,1)
  call dft(Ax1,nn,D,1)
  Ax1 = iu*aimag(Ax1)
  Ay1 = iu*aimag(Ay1)

  C1 = C1*C2
  D1 = D1*D2
  E1 = E1*E2
  call dft(C1,nn,D,1)
  call dft(D1,nn,D,1)
  call dft(E1,nn,D,1)

  ! normalization
  call make_lmask(nn,D,eL,lmask)
  Alkt = lmask * (lx*Ax1 + ly*Ay1 + (lx**2+ly**2)*(C1+D1+E1))

  ! inversion
  Akt = 0d0
  do i = 1, nx
    do j = 1, ny
      if (Alkt(i,j)>0)  Akt(i,j) = 1d0/Alkt(i,j)
    end do
  end do


end subroutine qte


subroutine qtb(nx,ny,D,OT,OB,TE,rL,eL,Akt)
!*  Normalization of the TB quadratic estimator between CMB lensing potential and patchy tau
!*
!*  Args:
!*    :nx, ny (int)       : Number of Lx and Ly grids
!*    :D[xy] (double)     : Map side length, or equivalent to dLx/2pi, dLy/2pi, with bounds (2)
!*    :rL[2] (int)        : Minimum and maximum multipole of CMB for reconstruction
!*    :OT[lx,ly] (double) : Inverse of Observed temperature power spectrum on 2D grid, with bounds (nx,ny)
!*    :OB[lx,ly] (double) : Inverse of Observed B-mode power spectrum on 2D grid, with bounds (nx,ny)
!*    :TE[lx,ly] (double) : Theory TE cross spectrum on 2D grid, with bounds (nx,ny)
!*    :eL[2] (int)        : Minimum and maximum multipole of output normalization spectrum, with bounds (2)
!*
!*  Returns:
!*    :Akt[lx,ly] (dcmplx) : Lensing-tau cross normalization on 2D grid, with bounds (nx,ny)
!*
  implicit none
  !I/O
  integer, intent(in) :: nx, ny
  integer, intent(in), dimension(2) :: eL, rL
  double precision, intent(in), dimension(2) :: D
  double precision, intent(in), dimension(nx,ny) :: TE, OT, OB
  double precision, intent(out), dimension(nx,ny) :: Akt
  !internal
  integer :: i, j, nn(2)
  double precision, dimension(nx,ny) :: lx, ly, lmask, Alkt
  double complex, dimension(nx,ny) :: Axx, Axy, Ayy, Bxx, Bxy, Byy, A, B, ei2p

  nn = (/nx,ny/)
  call elarrays_2d(nn,D,lx,ly,ei2p=ei2p)

  ! filtering
  call make_lmask(nn,D,rL,lmask)
  Bxx = lmask * lx**2*TE**2*OT
  Bxy = lmask * 2*lx*ly*TE**2*OT
  Byy = lmask * ly**2*TE**2*OT
  B   = lmask * 0.5d0*OB
  Axx = -ei2p**2 * Bxx
  Axy = -ei2p**2 * Bxy
  Ayy = -ei2p**2 * Byy
  A   = conjg(ei2p)**2 * B

  ! convolution
  call dft(A,nn,D,-1)
  call dft(B,nn,D,-1)
  call dft(Axx,nn,D,-1)
  call dft(Axy,nn,D,-1)
  call dft(Ayy,nn,D,-1)
  call dft(Bxx,nn,D,-1)
  call dft(Bxy,nn,D,-1)
  call dft(Byy,nn,D,-1)
  Axx = A*Axx + B*Bxx
  Axy = A*Axy + B*Bxy
  Ayy = A*Ayy + B*Byy
  call dft(Axx,nn,D,1)
  call dft(Axy,nn,D,1)
  call dft(Ayy,nn,D,1)
 
  ! normalization
  call make_lmask(nn,D,eL,lmask)
  Agg = lmask * (lx**2*Axx + lx*ly*Axy + ly**2*Ayy)
  Acc = lmask * (ly**2*Axx - lx*ly*Axy + lx**2*Ayy)

  ! inversion
  Ag = 0d0
  Ac = 0d0
  do i = 1, nx
    do j = 1, ny
      if (Agg(i,j)>0)  Ag(i,j) = 1d0/Agg(i,j)
      if (Acc(i,j)>0)  Ac(i,j) = 1d0/Acc(i,j)
    end do
  end do


end subroutine qtb


subroutine qee(nx,ny,D,OE,EE,rL,eL,Akt)
!*  Normalization of the EE quadratic estimator between CMB lensing potential and patchy tau
!*
!*  Args:
!*    :nx, ny (int)       : Number of Lx and Ly grids
!*    :D[xy] (double)     : Map side length, or equivalent to dLx/2pi, dLy/2pi, with bounds (2)
!*    :rL[2] (int)        : Minimum and maximum multipole of CMB for reconstruction
!*    :OE[lx,ly] (double) : Inverse of Observed E-mode power spectrum on 2D grid, with bounds (nx,ny)
!*    :EE[lx,ly] (double) : Theory E-mode spectrum on 2D grid, with bounds (nx,ny)
!*    :eL[2] (int)        : Minimum and maximum multipole of output normalization spectrum, with bounds (2)
!*
!*  Returns:
!*    :Akt[lx,ly] (dcmplx) : Lensing-tau cross normalization on 2D grid, with bounds (nx,ny)
!*
  implicit none
  !I/O
  integer, intent(in) :: nx, ny
  integer, intent(in), dimension(2) :: eL, rL
  double precision, intent(in), dimension(2) :: D
  double precision, intent(in), dimension(nx,ny) :: EE, OE
  double precision, intent(out), dimension(nx,ny) :: Akt
! [internal]
  integer :: i, j, nn(2)
  double precision, dimension(nx,ny) :: lx, ly, lmask, Alkt
  double complex, dimension(nx,ny) :: Axx, Axy, Ayy, Bxx, Bxy, Byy, A, B, Ax, Ay, Bx, By, ei2p

  nn = (/nx,ny/)
  call elarrays_2d(nn,D,lx,ly,ei2p=ei2p)

  ! filtering
  call make_lmask(nn,D,rL,lmask)

  Bxx = lmask * (lx**2*EE**2*OE)
  Bxy = lmask * (2*lx*ly*EE**2*OE)
  Byy = lmask * (ly**2*EE**2*OE)
  B   = lmask * OE
  Axx = ei2p**2 * Bxx
  Axy = ei2p**2 * Bxy
  Ayy = ei2p**2 * Byy
  A   = B * conjg(ei2p)**2

  Bx  = lmask * lx*EE*OE
  By  = lmask * ly*EE*OE
  Ax  = Bx * ei2p**2
  Ay  = By * ei2p**2
  
  ! convolution
  call dft(A,nn,D,-1)
  call dft(B,nn,D,-1)
  call dft(Axx,nn,D,-1)
  call dft(Axy,nn,D,-1)
  call dft(Ayy,nn,D,-1)
  call dft(Bxx,nn,D,-1)
  call dft(Bxy,nn,D,-1)
  call dft(Byy,nn,D,-1)
  call dft(Ax,nn,D,-1)
  call dft(Ay,nn,D,-1)
  call dft(Bx,nn,D,-1)
  call dft(By,nn,D,-1)

  Axx = A*Axx - Ax*conjg(Ax) + B*Bxx + Bx**2
  Axy = A*Axy - Ax*conjg(Ay) - Ay*conjg(Ax) + B*Bxy + 2*Bx*By
  Ayy = A*Ayy - Ay*conjg(Ay) + B*Byy + By**2

  call dft(Axx,nn,D,1)
  call dft(Axy,nn,D,1)
  call dft(Ayy,nn,D,1)

  ! normalization
  call make_lmask(nn,D,eL,lmask)
  Agg = lmask * (lx**2*Axx + lx*ly*Axy + ly**2*Ayy)
  Acc = lmask * (ly**2*Axx - lx*ly*Axy + lx**2*Ayy)

  ! inversion
  Ag = 0d0
  Ac = 0d0
  do i = 1, nx
    do j = 1, ny
      if (Agg(i,j)>0)  Ag(i,j) = 2d0/Agg(i,j)
      if (Acc(i,j)>0)  Ac(i,j) = 2d0/Acc(i,j)
    end do
  end do

end subroutine qee


subroutine qeb(nx,ny,D,OE,OB,EE,rL,eL,Akt)
!*  Normalization of the EB quadratic estimator between CMB lensing potential and patchy tau
!*
!*  Args:
!*    :nx, ny (int)       : Number of Lx and Ly grids
!*    :D[xy] (double)     : Map side length, or equivalent to dLx/2pi, dLy/2pi, with bounds (2)
!*    :rL[2] (int)        : Minimum and maximum multipole of CMB for reconstruction
!*    :OE[lx,ly] (double) : Inverse of Observed E-mode power spectrum on 2D grid, with bounds (nx,ny)
!*    :OB[lx,ly] (double) : Inverse of Observed B-mode power spectrum on 2D grid, with bounds (nx,ny)
!*    :EE[lx,ly] (double) : Theory E-mode spectrum on 2D grid, with bounds (nx,ny)
!*    :eL[2] (int)        : Minimum and maximum multipole of output normalization spectrum, with bounds (2)
!*
!*  Returns:
!*    :Akt[lx,ly] (dcmplx) : Lensing-tau cross normalization on 2D grid, with bounds (nx,ny)
!*
  implicit none
  !I/O
  integer, intent(in) :: nx, ny
  integer, intent(in), dimension(2) :: eL, rL
  double precision, intent(in), dimension(2) :: D
  double precision, intent(in), dimension(nx,ny) :: EE, OE, OB
  double precision, intent(out), dimension(nx,ny) :: Akt
  !internal
  integer :: i, j, nn(2)
  double precision, dimension(nx,ny) :: lx, ly, lmask, Alkt
  double complex, dimension(nx,ny) :: Axx, Axy, Ayy, Bxx, Bxy, Byy, A, B, ei2p

  nn = (/nx,ny/)
  call elarrays_2d(nn,D,lx,ly,ei2p=ei2p)

  ! filtering
  call make_lmask(nn,D,rL,lmask)
  Bxx = lmask * lx**2*EE**2*OE
  Bxy = lmask * 2*lx*ly*EE**2*OE
  Byy = lmask * ly**2*EE**2*OE
  B   = lmask * 0.5d0*OB
  Axx = -ei2p**2 * Bxx
  Axy = -ei2p**2 * Bxy
  Ayy = -ei2p**2 * Byy
  A   = B * conjg(ei2p)**2

  ! convolution
  call dft(A,nn,D,-1)
  call dft(B,nn,D,-1)
  call dft(Axx,nn,D,-1)
  call dft(Axy,nn,D,-1)
  call dft(Ayy,nn,D,-1)
  call dft(Bxx,nn,D,-1)
  call dft(Bxy,nn,D,-1)
  call dft(Byy,nn,D,-1)
  Axx = A*Axx + B*Bxx
  Axy = A*Axy + B*Bxy
  Ayy = A*Ayy + B*Byy
  call dft(Axx,nn,D,1)
  call dft(Axy,nn,D,1)
  call dft(Ayy,nn,D,1)

  ! normalization
  call make_lmask(nn,D,eL,lmask)
  Agg = lmask * (lx**2*Axx + lx*ly*Axy + ly**2*Ayy)
  Acc = lmask * (ly**2*Axx - lx*ly*Axy + lx**2*Ayy)

  ! inversion
  Ag = 0d0
  Ac = 0d0
  do i = 1, nx
    do j = 1, ny
      if (Agg(i,j)>0)  Ag(i,j) = 1d0/Agg(i,j)
      if (Acc(i,j)>0)  Ac(i,j) = 1d0/Acc(i,j)
    end do
  end do

end subroutine qeb


end module norm_kxt


